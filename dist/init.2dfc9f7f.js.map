{"version":3,"sources":["icons.js","Card.js","Board.js","CountdownTimer.js","UI.js","gameState.js","init.js"],"names":["icons","Card","id","pair","className","Board","num","app","document","getElementById","board","makeCards","classList","add","appendChild","level","levels","children","length","clearCards","firstChild","removeChild","iconsLength","memo","newCard","cards","getNumber","getNum","Math","floor","random","i","getCardName","push","console","log","cardsLength","appendCardsToDOM","randomize","arr","counter","startLength","element","splice","el","createElement","setAttribute","cover","back","CountdownTimer","mins","secs","decrement","minutes","seconds","textContent","round","setTimeout","publicFunctions","countdown","clearCountdown","UI","flippedCards","totalCards","currentCardToMatch","cardFlippedCount","totalCardsFlippedCount","addUIEventListeners","querySelectorAll","makeResetButton","forEach","addEventListener","event","updateCardFlippedCount","handleCardClick","target","container","querySelector","button","resetGame","updateTotalCardsFlippedCount","targetId","currentCard","match","getAttribute","boardId","checkIfCardMatched","triggerCardFlip","card","cardIds","boardIds","clearCurrentCardToMatch","handleGameWin","triggerCardTurn","nextSibling","toggle","callback","bind","updateSuccessMessage","resetCardState","updateGameOnWin","gameWon","message","clearSuccessMessage","updatePoints","points","updateLevel","GameSate","timer","game","start","levelUp","initTimer","numOfCards","calculatePoints","total","startBTN","init","remove"],"mappings":"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","file":"init.2dfc9f7f.js","sourceRoot":"../src","sourcesContent":["const icons = [\n  \"lni-island\",\n  \"lni-juice\",\n  \"lni-invention\",\n  \"lni-infinite\",\n  \"lni-leaf\",\n  \"lni-magnet\",\n  \"lni-map-marker\",\n  \"lni-mashroom\",\n  \"lni-microphone\",\n  \"lni-microscope\",\n  \"lni-mouse\",\n  \"lni-snapchat\",\n  \"lni-sketch\",\n  \"lni-eraser\",\n  \"lni-alarm-clock\",\n  \"lni-baloon\",\n  \"lni-bolt-alt\",\n  \"lni-bricks\",\n  \"lni-bridge\",\n  \"lni-briefcase\",\n  \"lni-brush\",\n  \"lni-brush-alt\",\n  \"lni-bug\",\n  \"lni-bulb\",\n  \"lni-bullhorn\",\n  \"lni-burger\",\n  \"lni-bus\",\n  \"lni-cake\",\n  \"lni-camera\",\n  \"lni-candy\",\n  \"lni-cloud\",\n  \"lni-cloudy-sun\",\n  \"lni-coffee-cup\",\n  \"lni-compass\",\n  \"lni-cup\",\n  \"lni-cut\",\n  \"lni-drop\",\n  \"lni-diamond\",\n  \"lni-dinner\",\n  \"lni-flower\",\n  \"lni-graduation\",\n  \"lni-hand\",\n  \"lni-heart\",\n  \"lni-heart-filled\",\n  \"lni-hand\",\n  \"lni-home\",\n  \"lni-hospital\",\n];\nexport default icons;\n","function Card(id, pair, className) {\n  this.id = id;\n  this.pair = pair;\n  this.className = className;\n}\n\nexport default Card;\n","import icons from \"./icons\";\nimport Card from \"./Card\";\n\nfunction Board(num) {\n  const app = document.getElementById(\"app\");\n  const board = document.getElementById(\"board\");\n  board.classList.add(\"board\");\n  app.appendChild(board);\n\n  function clearCards(board) {\n    while (board.firstChild) {\n      board.removeChild(board.firstChild);\n    }\n  }\n\n  function makeCards(level) {\n    const levels = [6, 12, 18, 24, 30, 36];\n    const num = levels[level - 1];\n\n    if (board.children.length > 0) {\n      clearCards(board);\n    }\n\n    const iconsLength = icons.length;\n    const cards = [];\n    const getNumber = getRandomNumber();\n    let newCard;\n\n    for (let i = 1; i <= num / 2; i++) {\n      let getCardName = getNumber(iconsLength);\n      newCard = new Card(i, 0, icons[getCardName]);\n      cards.push(newCard);\n    }\n    console.log('ORiginal cards length', cards);\n    let cardsLength = cards.length;\n    for (let i = 0; i < cardsLength; i++) {\n      cards[i].pair = (num / 2 + 1) + i;\n      newCard = new Card((num / 2 + 1) + i, i + 1, cards[i].className);\n      cards.push(newCard);\n    }\n\n    appendCardsToDOM(cards);\n    return cards;\n  }\n\n  function appendCardsToDOM(cards) {\n    cards = randomize(cards);\n    for (let i = 0; i < cards.length; i++) {\n      let el = document.createElement(\"li\");\n      el.classList.add(\"card\");\n      el.setAttribute(\"id\", `card-${cards[i].id}`);\n      el.setAttribute('data-match', `card-${cards[i].pair}`)\n      let cover = document.createElement(\"div\");\n      let back = document.createElement(\"div\");\n      cover.classList.add(\"cover\");\n      // cover.innerHTML = \"<img src='/owls.png' alt='owls'>\";\n      cover.setAttribute(\"id\", `card-${cards[i].id}${cards[i].id}${i}-front`);\n      back.classList.add(\"back\", \"lni\", cards[i].className, \"flip-card-back\");\n      back.setAttribute(\"id\", `card-${cards[i].id}${cards[i].id}${i}-back`);\n      board.appendChild(el);\n      el.appendChild(cover);\n      el.appendChild(back);\n    }\n  }\n\n  function getRandomNumber() {\n    const memo = {};\n    return function getNum(length) {\n      let num = Math.floor(Math.random() * Math.floor(length));\n      if (!memo[num]) {\n        memo[num] = true;\n        return num;\n      } else {\n        return getNum(length);\n      }\n    };\n  }\n\n  function randomize(arr) {\n    let startLength = arr.length - 1;\n    let counter = 0;\n    while (counter < startLength) {\n      let random = Math.floor(Math.random() * Math.floor(startLength - 1));\n      let element = arr.splice(random, 1);\n      arr.push(...element);\n      counter++;\n    }\n    return arr;\n  }\n\n  return makeCards(num);\n}\n\nexport default Board;\n","function CountdownTimer() {\n    let mins = 2;\n\n    //calculate the seconds \n    let secs = mins * 60;\n\n    //countdown function is evoked when page is loaded \n    const countdown = () => setTimeout(decrement, 60);\n\n    // countdown is cleared\n    function clearCountdown() {\n        mins = 0;\n        secs = 0;\n        return 0;\n    }\n\n    //Decrement function decrement the value. \n    function decrement() {\n        let minutes, seconds;\n        if (document.getElementById) {\n            minutes = document.getElementById(\"mins-left\");\n            seconds = document.getElementById(\"secs-left\");\n\n            //if less than a minute remaining \n            //Display only seconds value. \n            if (seconds < 59) {\n                seconds.textContent = secs;\n            }\n\n            //Display both minutes and seconds \n            //getminutes and getseconds is used to \n            //get minutes and seconds \n            else {\n                minutes.textContent = getminutes();\n                seconds.textContent = getseconds();\n            }\n            //when less than a minute remaining \n            //colour of the minutes and seconds \n            //changes to red \n            // if (mins < 1) {\n            //     minutes.style.color = \"red\";\n            //     seconds.style.color = \"red\";\n            // }\n            //if seconds becomes zero, \n            //then page alert time up \n            if (mins < 0) {\n                // alert('time up');\n                minutes.textContent = 0;\n                seconds.textContent = 0;\n            }\n            //if seconds > 0 then seconds is decremented \n            else {\n                secs--;\n                setTimeout(decrement, 1000);\n            }\n        }\n    }\n\n    function getminutes() {\n        //minutes is seconds divided by 60, rounded down \n        mins = Math.floor(secs / 60);\n        return mins;\n    }\n\n    function getseconds() {\n        //take minutes remaining (as seconds) away  \n        //from total seconds remaining \n        return secs - Math.round(mins * 60);\n    }\n\n    const publicFunctions = {\n        countdown,\n        clearCountdown\n    }\n\n    return publicFunctions;\n}\n\nexport default CountdownTimer;\n\n","import GameState from './gameState';\n\nconst UI = {\n  flippedCards: [],\n  totalCards: 0,\n  currentCardToMatch: null,\n  cardFlippedCount: 0,\n  totalCardsFlippedCount: 0,\n\n  addUIEventListeners() {\n    const cards = document.querySelectorAll(\".card\");\n    this.totalCards = cards.length / 2;\n    this.makeResetButton();\n    // Cards\n    cards.forEach((element) => {\n      element.addEventListener(\"click\", (event) => {\n        if (this.cardFlippedCount < 2) {\n          this.updateCardFlippedCount();\n          this.handleCardClick(element, event.target.id);\n        }\n      });\n    });\n  },\n\n  makeResetButton() {\n    const container = document.querySelector('.game-state');\n    let button = document.getElementById('game-reset');\n\n    if (!button) {\n      button = document.createElement('button');\n      button.textContent = 'Reset Game';\n      button.setAttribute('id', 'game-reset')\n      container.appendChild(button);\n    }\n\n    button.addEventListener('click', (event) => {\n      GameState.resetGame()\n    });\n  },\n\n  updateCardFlippedCount() {\n    this.cardFlippedCount++;\n    this.updateTotalCardsFlippedCount();\n  },\n\n  updateTotalCardsFlippedCount() {\n    this.totalCardsFlippedCount++;\n    const el = document.getElementById('card-flips');\n    el.textContent = this.totalCardsFlippedCount;\n  },\n\n  handleCardClick(element, targetId) {\n    let currentCard = {\n      id: element.id,\n      match: element.getAttribute('data-match'),\n      boardId: targetId\n    };\n    if (!this.currentCardToMatch) {\n      this.currentCardToMatch = currentCard;\n    } else {\n      this.checkIfCardMatched(currentCard);\n    }\n    this.triggerCardFlip(targetId);\n  },\n\n  checkIfCardMatched(card) {\n    const cardIds = [card.id, this.currentCardToMatch.id];\n    const boardIds = [card.boardId, this.currentCardToMatch.boardId];\n    if (this.currentCardToMatch.id === card.match) {\n      this.flippedCards.push([...cardIds]);\n      this.clearCurrentCardToMatch();\n      if (this.totalCards === this.flippedCards.length) {\n        console.log('Game Won!');\n        this.handleGameWin();\n      }\n    } else {\n      this.triggerCardTurn(boardIds);\n    }\n  },\n\n  clearCurrentCardToMatch() {\n    this.currentCardToMatch = null;\n    this.cardFlippedCount = 0;\n  },\n\n  triggerCardFlip(id) {\n    const selectedCard = document.getElementById(id);\n    let flip = selectedCard.nextSibling;\n    flip.classList.toggle(\"flip-card-back\");\n  },\n\n  triggerCardTurn(cards) {\n    const callback = this.clearCurrentCardToMatch.bind(this);\n    setTimeout(function () {\n      cards.forEach(card => {\n        let current = document.getElementById(card).nextSibling;\n        current.classList.toggle(\"flip-card-back\");\n      });\n      callback();\n    }, 1000);\n  },\n\n  handleGameWin() {\n    this.updateSuccessMessage(true);\n    this.resetCardState()\n    setTimeout(() => {\n      GameState.updateGameOnWin(this.totalCards * 2);\n    }, 1000);\n  },\n\n  updateSuccessMessage(gameWon) {\n    const message = document.getElementById('game-success');\n    if (gameWon) {\n      message.textContent = 'Yay, you won!!!';\n    } else {\n      message.textContent = \"It's ok to finally, pick yourself and try again\";\n    }\n  },\n\n  resetCardState() {\n    this.flippedCards = [];\n    this.currentCardToMatch = null;\n    this.cardFlippedCount = 0;\n    this.totalCardsFlippedCount = 0;\n  },\n\n  clearSuccessMessage() {\n    const message = document.getElementById('game-success');\n    message.textContent = '';\n  },\n\n  updatePoints(points) {\n    const currentPoints = document.getElementById('points');\n    currentPoints.textContent = points;\n  },\n\n  updateLevel(level) {\n    const container = document.getElementById('level');\n    container.textContent = level;\n  }\n};\n\nexport default UI;\n\n","import Board from \"./Board\";\nimport CountdownTimer from './CountdownTimer';\nimport UI from \"./UI\";\n\nconst GameSate = {\n  points: 0,\n  timer: null,\n  level: 0,\n  game: null,\n  start() {\n    console.log(\"Game started!\");\n    this.levelUp();\n    this.initTimer();\n    this.game = new Board(this.level);\n    UI.addUIEventListeners();\n  },\n  resetGame() {\n    this.timer.clearCountdown();\n    this.points = 0;\n    this.level = 1;\n    this.game = new Board(this.level);\n    this.updateGameOnWin(0);\n    this.initTimer();\n  },\n  initTimer() {\n    this.timer = CountdownTimer();\n    this.timer.countdown();\n  },\n  updateGameOnWin(numOfCards) {\n    this.timer.clearCountdown();\n    this.calculatePoints(numOfCards);\n    this.levelUp();\n    this.game = new Board(this.level);\n    UI.addUIEventListeners();\n    UI.clearSuccessMessage();\n    this.initTimer();\n  },\n  calculatePoints(numOfCards) {\n    let total = numOfCards * 100;\n    UI.updatePoints(total);\n  },\n  levelUp() {\n    this.level++;\n    UI.updateLevel(this.level);\n  }\n};\n\nexport default GameSate;\n","import game from \"./gameState\";\n\nconst startBTN = document.getElementById(\"game-start\");\nstartBTN.addEventListener(\"click\", function () {\n  init();\n});\nfunction init() {\n  console.log(\"start\");\n  startBTN.remove();\n  game.start();\n}\n"]}